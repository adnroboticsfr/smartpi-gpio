#!/usr/bin/env python3
import sys
from gpio.gpio import GPIO
from gpio.pins import PinMode

def afficher_utilisation():
    print("Utilisation :")
    print("  gpio-smpi <pin> mode <in|out>")
    print("  gpio-smpi <pin> write <on|off>")
    print("  gpio-smpi <pin> read")
    print("  gpio-smpi readall")

def main():
    if len(sys.argv) < 3:
        afficher_utilisation()
        sys.exit(1)

    gpio = GPIO(PinMode.BCM)

    try:
        pin = int(sys.argv[1])
        commande = sys.argv[2]

        if commande == "mode":
            if len(sys.argv) != 4:
                afficher_utilisation()
                sys.exit(1)
            mode = sys.argv[3].lower()
            if mode not in ["in", "out"]:
                print("Mode invalide. Utilisez 'in' ou 'out'.")
                afficher_utilisation()
                sys.exit(1)
            gpio.set_direction(pin, direction=mode)

        elif commande == "write":
            if len(sys.argv) != 4:
                afficher_utilisation()
                sys.exit(1)
            valeur = sys.argv[3].lower()
            if valeur not in ["on", "off"]:
                print("Valeur invalide. Utilisez 'on' ou 'off'.")
                afficher_utilisation()
                sys.exit(1)
            gpio.write(pin, 1 if valeur == "on" else 0)

        elif commande == "read":
            if len(sys.argv) != 3:
                afficher_utilisation()
                sys.exit(1)
            valeur = gpio.read(pin)
            print(f"Pin {pin} : {valeur}")

        elif commande == "readall":
            etats = gpio.read_all()
            for pin, etat in etats.items():
                print(f"Pin {pin} : {etat}")

        else:
            afficher_utilisation()
            sys.exit(1)

    except ValueError as e:
        print(f"Erreur : {e}")
        afficher_utilisation()
        sys.exit(1)
    except Exception as e:
        print(f"Erreur inattendue : {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
