#!/usr/bin/env python3 
import sys
from smartpi_gpio.gpio import GPIO
from smartpi_gpio.pins import PinMode
from smartpi_gpio.pca9685 import PCA9685

def show_usage():
    print("Usage:")
    print("  gpio <pin> mode <in|out> [pull-up|pull-down|none]")
    print("  gpio <pin> write <on|off|high|low|1|0>")
    print("  gpio <pin> read")
    print("  gpio readall")
    print("  gpio pca9685 <channel> <on> <off>")
    print("  gpio pca9685 freq <frequency>")
    print("  gpio version")
    print("  gpio export <pin>")
    print("  gpio unexport <pin>")

def handle_pca9685(gpio):
    """Handle PCA9685 commands."""
    pca = PCA9685()
    if len(sys.argv) == 5:
        channel = int(sys.argv[2])
        on = int(sys.argv[3])
        off = int(sys.argv[4])
        pca.set_pwm(channel, on, off)
        print(f"PWM set on channel {channel} (on: {on}, off: {off})")
    elif len(sys.argv) == 4 and sys.argv[2] == "freq":
        freq = int(sys.argv[3])
        pca.set_pwm_freq(freq)
        print(f"PWM frequency set to {freq} Hz")
    else:
        show_usage()
        sys.exit(1)

def handle_export(gpio):
    """Handle GPIO export command."""
    if len(sys.argv) != 3:
        show_usage()
        sys.exit(1)
    pin = int(sys.argv[2])
    gpio.export(pin)
    print(f"GPIO pin {pin} exported.")

def handle_unexport(gpio):
    """Handle GPIO unexport command."""
    if len(sys.argv) != 3:
        show_usage()
        sys.exit(1)
    pin = int(sys.argv[2])
    gpio.unexport(pin)
    print(f"GPIO pin {pin} unexported.")

def handle_readall(gpio):
    """Handle readall command."""
    gpio.read_all()

def handle_pin_command(gpio, pin, command):
    """Handle commands for specific pins."""
    if command == "mode":
        if len(sys.argv) < 4 or len(sys.argv) > 5:
            show_usage()
            sys.exit(1)
        mode = sys.argv[3].lower()
        pull = sys.argv[4].lower() if len(sys.argv) == 5 else None

        if mode not in ["in", "out"]:
            print("Invalid mode. Use 'in' or 'out'.")
            show_usage()
            sys.exit(1)

        gpio.set_direction(pin, direction=mode, pull=pull)

    elif command == "write":
        if len(sys.argv) != 4:
            show_usage()
            sys.exit(1)
        value = sys.argv[3].lower()
        if value not in ["on", "off", "high", "low", "1", "0"]:
            print("Invalid value. Use 'on', 'off', 'high', 'low', '1', or '0'.")
            show_usage()
            sys.exit(1)
        numeric_value = 1 if value in ["on", "high", "1"] else 0
        gpio.write(pin, numeric_value)
        print(f"Written {numeric_value} to pin {pin}")

    elif command == "read":
        if len(sys.argv) != 3:
            show_usage()
            sys.exit(1)
        value = gpio.read(pin)
        print(f"Pin {pin}: {value}")

def main():
    if len(sys.argv) < 2:
        show_usage()
        sys.exit(1)

    gpio = GPIO()

    # Handling PCA9685 commands
    if sys.argv[1] == "pca9685":
        handle_pca9685(gpio)

    elif sys.argv[1] == "version":
        gpio.version()
        sys.exit(0)

    elif sys.argv[1] == "export":
        handle_export(gpio)
        sys.exit(0)

    elif sys.argv[1] == "unexport":
        handle_unexport(gpio)
        sys.exit(0)

    elif sys.argv[1] == "readall":
        handle_readall(gpio)
        return

    else:
        try:
            pin = int(sys.argv[1])
            command = sys.argv[2]
            handle_pin_command(gpio, pin, command)
        except ValueError as e:
            print(f"Error: {e}")
            show_usage()
            sys.exit(1)
        except Exception as e:
            print(f"Unexpected error: {e}")
            sys.exit(1)

if __name__ == "__main__":
    main()
